 
#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>

#include "Shader_m.h"
#include "Camera.h"
#include "Model.h"

#include <iostream>
#include "FileSystem.h"
#include "btBulletCollisionCommon.h"
#include "btBulletDynamicsCommon.h"

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void mouse_callback(GLFWwindow* window, double xpos, double ypos);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);
void processInput(GLFWwindow *window);

//new
unsigned int loadTexture(const char *path);

// settings
const unsigned int SCR_WIDTH = 1920;
const unsigned int SCR_HEIGHT = 1080;


// camera
Camera camera(glm::vec3(0.0f, 50.0f, 50.0f));
float lastX = SCR_WIDTH / 2.0f;
float lastY = SCR_HEIGHT / 2.0f;
bool firstMouse = true;

//blinn lighting
bool blinn = false;
bool blinnKeyPressed = false;

// timing
float deltaTime = 0.0f;
float lastFrame = 0.0f;

int main()
{




	// glfw: initialize and configure..standard stuff
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	// glfw window creation and check
	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "frick u yoshi booty lookin booty", NULL, NULL);
	if (window == NULL)
	{
		std::cout << "Failed to create GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}

	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
	glfwSetCursorPosCallback(window, mouse_callback);
	glfwSetScrollCallback(window, scroll_callback);

	// tell GLFW to capture our mouse
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

	// glad: load all OpenGL function pointers
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	// configure global opengl state
	glEnable(GL_DEPTH_TEST);
	//new
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	
	// build and compile shaders
	//Shader modelShader("resources/Shaders/1.model_loading.vs", "resources/Shaders/1.model_loading.fs");
	Shader lightShader("resources/Shaders/1.advanced_lighting.vs", "resources/Shaders/1.advanced_lighting.fs");
	//Shader lightingShader("resources/Shaders/multiple_lights.vs", "resources/Shaders/multiple_lights.fs");
	//Shader lampShader("resources/Shaders/lamp.vs", "resources/Shaders/lamp.fs");

	// load models
	Model yoshiModel("resources/Models/Yoshi/yoshi.obj");
	Model pyrModel("resources/Objects/pyr.obj");
	Model houseModel("resources/Models/Broken_House/Broken House.obj");

	//cube primitive specs
	float vertices[] = {
		// positions          // normals           // texture coords
		-5.5f, -5.5f, -5.5f,  0.0f,  0.0f, -1.0f,  0.0f,  0.0f,
		 5.5f, -5.5f, -5.5f,  0.0f,  0.0f, -1.0f,  10.0f,  0.0f,
		 5.5f,  5.5f, -5.5f,  0.0f,  0.0f, -1.0f,  10.0f,  10.0f,
		 5.5f,  5.5f, -5.5f,  0.0f,  0.0f, -1.0f,  10.0f,  10.0f,
		-5.5f,  5.5f, -5.5f,  0.0f,  0.0f, -1.0f,  0.0f,  10.0f,
		-5.5f, -5.5f, -5.5f,  0.0f,  0.0f, -1.0f,  0.0f,  0.0f,
		 			   
		-5.5f, -5.5f,  5.5f,  0.0f,  0.0f,  1.0f,  0.0f,  0.0f,
		 5.5f, -5.5f,  5.5f,  0.0f,  0.0f,  1.0f,  10.0f,  0.0f,
		 5.5f,  5.5f,  5.5f,  0.0f,  0.0f,  1.0f,  10.0f,  10.0f,
		 5.5f,  5.5f,  5.5f,  0.0f,  0.0f,  1.0f,  10.0f,  10.0f,
		-5.5f,  5.5f,  5.5f,  0.0f,  0.0f,  1.0f,  0.0f,  10.0f,
		-5.5f, -5.5f,  5.5f,  0.0f,  0.0f,  1.0f,  0.0f,  0.0f,
		 			   
		-5.5f,  5.5f,  5.5f, -1.0f,  0.0f,  0.0f,  10.0f,  0.0f,
		-5.5f,  5.5f, -5.5f, -1.0f,  0.0f,  0.0f,  10.0f,  10.0f,
		-5.5f, -5.5f, -5.5f, -1.0f,  0.0f,  0.0f,  0.0f,  10.0f,
		-5.5f, -5.5f, -5.5f, -1.0f,  0.0f,  0.0f,  0.0f,  10.0f,
		-5.5f, -5.5f,  5.5f, -1.0f,  0.0f,  0.0f,  0.0f,  0.0f,
		-5.5f,  5.5f,  5.5f, -1.0f,  0.0f,  0.0f,  10.0f,  0.0f,
		 			   
		 5.5f,  5.5f,  5.5f,  1.0f,  0.0f,  0.0f,  10.0f,  0.0f,
		 5.5f,  5.5f, -5.5f,  1.0f,  0.0f,  0.0f,  10.0f,  10.0f,
		 5.5f, -5.5f, -5.5f,  1.0f,  0.0f,  0.0f,  0.0f,  10.0f,
		 5.5f, -5.5f, -5.5f,  1.0f,  0.0f,  0.0f,  0.0f,  10.0f,
		 5.5f, -5.5f,  5.5f,  1.0f,  0.0f,  0.0f,  0.0f,  0.0f,
		 5.5f,  5.5f,  5.5f,  1.0f,  0.0f,  0.0f,  10.0f,  0.0f,
		 			   
		-5.5f, -5.5f, -5.5f,  0.0f, -1.0f,  0.0f,  0.0f,  10.0f,
		 5.5f, -5.5f, -5.5f,  0.0f, -1.0f,  0.0f,  10.0f,  10.0f,
		 5.5f, -5.5f,  5.5f,  0.0f, -1.0f,  0.0f,  10.0f,  0.0f,
		 5.5f, -5.5f,  5.5f,  0.0f, -1.0f,  0.0f,  10.0f,  0.0f,
		-5.5f, -5.5f,  5.5f,  0.0f, -1.0f,  0.0f,  0.0f,  0.0f,
		-5.5f, -5.5f, -5.5f,  0.0f, -1.0f,  0.0f,  0.0f,  10.0f,
		 			   
		-5.5f,  5.5f, -5.5f,  0.0f,  1.0f,  0.0f,  0.0f,  10.0f,
		 5.5f,  5.5f, -5.5f,  0.0f,  1.0f,  0.0f,  10.0f,  10.0f,
		 5.5f,  5.5f,  5.5f,  0.0f,  1.0f,  0.0f,  10.0f,  0.0f,
		 5.5f,  5.5f,  5.5f,  0.0f,  1.0f,  0.0f,  10.0f,  0.0f,
		-5.5f,  5.5f,  5.5f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f,
		-5.5f,  5.5f, -5.5f,  0.0f,  1.0f,  0.0f,  0.0f,  10.0f
	};
	
	// positions of the point lights
	glm::vec3 pointLightPositions[] = {
		glm::vec3(8.7f,  5.2f,  8.0f),
		glm::vec3(8.3f, -9.3f, -7.0f),
		glm::vec3(-9.0f,  2.0f, -12.0f),
		glm::vec3(5.0f,  9.0f, -3.0f)
	};
	
	//create floor primitive plane thing
	float planeVertices[] = 
	{
		// positions            // normals         // texcoords
		 30.0f, -0.5f,  30.0f,  0.0f, 1.0f, 0.0f,  30.0f,  0.0f,
		-30.0f, -0.5f,  30.0f,  0.0f, 1.0f, 0.0f,   0.0f,  0.0f,
		-30.0f, -0.5f, -30.0f,  0.0f, 1.0f, 0.0f,   0.0f, 30.0f,
		 				
		 30.0f, -0.5f,  30.0f,  0.0f, 1.0f, 0.0f,  30.0f,  0.0f,
		-30.0f, -0.5f, -30.0f,  0.0f, 1.0f, 0.0f,   0.0f, 30.0f,
		 30.0f, -0.5f, -30.0f,  0.0f, 1.0f, 0.0f,  30.0f, 30.0f
	};

	// plane VAO
	unsigned int planeVAO, planeVBO;
	glGenVertexArrays(1, &planeVAO);
	glGenBuffers(1, &planeVBO);
	glBindVertexArray(planeVAO);
	glBindBuffer(GL_ARRAY_BUFFER, planeVBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(planeVertices), planeVertices, GL_STATIC_DRAW);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(1);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(2);
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glBindVertexArray(0);
	
	// configure the cube's VAO (and VBO)
	unsigned int VBO, cubeVAO;
	glGenVertexArrays(1, &cubeVAO);
	glGenBuffers(1, &VBO);

	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	glBindVertexArray(cubeVAO);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(2);

	//the lights VAO, use the same VBO for cubes as the lights
	//unsigned int lightVAO;
	//glGenVertexArrays(1, &lightVAO);
	//glBindVertexArray(lightVAO);
	//
	//glBindBuffer(GL_ARRAY_BUFFER, VBO);
	//// note that we update the lamp's position attribute's stride to reflect the updated buffer data
	//glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	//glEnableVertexAttribArray(0);

	// get floor texture
	unsigned int floorTexture = loadTexture("resources/Textures/wood.png");
	// get light textures
	//unsigned int diffuseMap = loadTexture("resources/Textures/container2.png");
	//unsigned int specularMap = loadTexture("resources/Textures/container2_specular.png");

	// shader configuration
	//lightingShader.use();
	//lightingShader.setInt("material.diffuse", 0);
	//lightingShader.setInt("material.specular", 1);

	// lighting info
	glm::vec3 lightPos(0.0f, 20.0f, 0.0f);

	//end of new stuff

	// render loop
	while (!glfwWindowShouldClose(window))
	{
		// per-frame time logic
		float currentFrame = glfwGetTime();
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;

		// input
		processInput(window);

		// render
		glClearColor(0.05f, 0.25f, 0.03f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		
		//lightingShader.use();
		//lightingShader.setVec3("viewPos", camera.Position);
		//lightingShader.setFloat("material.shininess", 32.0f);

		// directional light

		// point light 1
		//lightShader.setVec3("pointLights[0].position", pointLightPositions[0]);
		////lightingShader.setVec3("pointLights[0].position", pointLightPositions[0]);
		//
		//// point light 2
		//lightShader.setVec3("pointLights[1].position", pointLightPositions[1]);
		//
		//// point light 3
		//lightShader.setVec3("pointLights[2].position", pointLightPositions[2]);
		//
		//// point light 4
		//lightShader.setVec3("pointLights[3].position", pointLightPositions[3]);
		//
		//// spotLight
		//lightShader.setVec3("spotLight.position", camera.Position);
	

		// view/projection transformations
		glm::mat4 projection = glm::perspective(glm::radians(camera.Zoom), 
			(float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);
		glm::mat4 view = camera.GetViewMatrix();
		// enable shader for model
		//modelShader.use();
		//modelShader.setMat4("projection", projection);
		//modelShader.setMat4("view", view);
		
		// enable separate shader for lights
		lightShader.use();
		lightShader.setMat4("projection", projection);
		lightShader.setMat4("view", view);
		
		// draw yoshi
		glm::mat4 model = glm::mat4(1.0f);
		//model = glm::scale(model, glm::vec3(3.3f, 3.3f, 3.3f));
		//model = glm::translate(model, glm::vec3(0.0f, -1.75f, 0.0f)); // translate it down so it's at the center of the scene
		model = glm::scale(model, glm::vec3(3.3f, 3.3f, 3.3f)) 
			* glm::translate(model, glm::vec3(0.0f, -1.75f, 10.0f));
		
		lightShader.setMat4("model", model);
		yoshiModel.Draw(lightShader);
		//modelShader.setMat4("model", model);
		//yoshiModel.Draw(modelShader);

		// draw house
		//glm::mat4 brokenModel = translation * glm::scale(model, glm::vec3(3.0f, 3.0f, 3.0f));;
		//lightShader.setMat4("model", model);
		glm::mat4 thirdModel = glm::mat4(1.0f);
		thirdModel = glm::scale(thirdModel, glm::vec3(2.0f, 2.0f, 2.0f));
		//thirdModel = glm::translate(model, glm::vec3(0.0f, -1.75f, 0.0f));
		lightShader.setMat4("model", thirdModel);
		houseModel.Draw(lightShader);
		//modelShader.setMat4("model", model);
		//houseModel.Draw(modelShader);
		
		// draw pyramid
		//glm::mat4 scale = glm::scale(glm::mat4(1.0f), glm::vec3(20.0f,20.0f,20.0f));
		//glm::mat4 translation = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, -10.75f, 3.0f));
		//model = translation * scale;

		//lightShader.setMat4("model", model);
		glm::mat4 secondModel = glm::mat4(1.0f);
		lightShader.setMat4("model", secondModel);
		pyrModel.Draw(lightShader);
		//modelShader.setMat4("model", model);
		//pyrModel.Draw(modelShader);
		
		//translation * glm::scale(model, glm::vec3(3.0f, 3.0f, 3.0f));
	
		// set light uniforms
		lightShader.setVec3("viewPos", camera.Position);
		lightShader.setVec3("lightPos", lightPos);
		lightShader.setInt("blinn", blinn);
		//new code

		// floor
		glBindVertexArray(planeVAO);
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, floorTexture);
		glDrawArrays(GL_TRIANGLES, 0, 6);

		// also draw the lamp object(s)
		//lampShader.use();
		//lampShader.setMat4("projection", projection);
		//lampShader.setMat4("view", view);

		// we now draw as many light bulbs as we have point lights.
		//glBindVertexArray(lightVAO);
		//for (unsigned int i = 0; i < 4; i++)
		//{
		//	model = glm::mat4(1.0f);
		//	model = glm::translate(model, pointLightPositions[i]);
		//	model = glm::scale(model, glm::vec3(0.2f)); // Make it a smaller cube
		//	lampShader.setMat4("model", model);
		//
		//	// bind diffuse map
		//	glActiveTexture(GL_TEXTURE1);
		//	glBindTexture(GL_TEXTURE_2D, diffuseMap);
		//	glDrawArrays(GL_TRIANGLES, 0, 36);
		//	// bind specular map
		//	glActiveTexture(GL_TEXTURE2);
		//	glBindTexture(GL_TEXTURE_2D, specularMap);
		//	glDrawArrays(GL_TRIANGLES, 0, 36);
		//}

		// glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	glDeleteVertexArrays(1, &planeVAO);
	glDeleteBuffers(1, &planeVBO);
	glDeleteVertexArrays(1, &cubeVAO);
	glDeleteBuffers(1, &VBO);

	
	// glfw: terminate, clearing all previously allocated GLFW resources.
	glfwTerminate();

	std::cin.ignore();
	return 0;
}


//draw shader displays

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
void processInput(GLFWwindow *window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);

	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
		camera.ProcessKeyboard(FORWARD, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
		camera.ProcessKeyboard(BACKWARD, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
		camera.ProcessKeyboard(LEFT, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
		camera.ProcessKeyboard(RIGHT, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS)
		camera.ProcessKeyboard(UP, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS)
		camera.ProcessKeyboard(DOWN, deltaTime);

	if (glfwGetKey(window, GLFW_KEY_B) == GLFW_PRESS && !blinnKeyPressed)
	{
		blinn = !blinn;
		blinnKeyPressed = true;
	}
	if (glfwGetKey(window, GLFW_KEY_B) == GLFW_RELEASE)
	{
		blinnKeyPressed = false;
	}
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	// make sure the viewport matches the new window dimensions; note that width and 
	// height will be significantly larger than specified on retina displays.
	glViewport(0, 0, width, height);
}

// glfw: whenever the mouse moves, this callback is called
void mouse_callback(GLFWwindow* window, double xpos, double ypos)
{
	if (firstMouse)
	{
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}

	float xoffset = xpos - lastX;
	float yoffset = lastY - ypos; 
	// reversed since y-coordinates go from bottom to top

	lastX = xpos;
	lastY = ypos;

	camera.ProcessMouseMovement(xoffset, yoffset);
}

// glfw: whenever the mouse scroll wheel scrolls, this callback is called
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
	camera.ProcessMouseScroll(yoffset);
}

// utility function for loading a 2D texture from file
unsigned int loadTexture(char const * path)
{
	unsigned int textureID;
	glGenTextures(1, &textureID);

	int width, height, nrComponents;
	unsigned char *data = stbi_load(path, &width, &height, &nrComponents, 0);
	if (data)
	{
		GLenum format;
		if (nrComponents == 1)
			format = GL_RED;
		else if (nrComponents == 3)
			format = GL_RGB;
		else if (nrComponents == 4)
			format = GL_RGBA;

		glBindTexture(GL_TEXTURE_2D, textureID);
		glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);

		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, format == GL_RGBA ? GL_CLAMP_TO_EDGE : GL_REPEAT); // for this tutorial: use GL_CLAMP_TO_EDGE to prevent semi-transparent borders. Due to interpolation it takes texels from next repeat 
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, format == GL_RGBA ? GL_CLAMP_TO_EDGE : GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

		stbi_image_free(data);
	}
	else
	{
		std::cout << "Texture failed to load at path: " << path << std::endl;
		stbi_image_free(data);
	}

	return textureID;
}

